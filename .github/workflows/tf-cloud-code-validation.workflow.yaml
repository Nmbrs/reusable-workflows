name: tf cloud code validation

on:
  workflow_call:
    inputs:
      target-directory:
        description: "Target working directory"
        required: false
        type: string

    secrets:
      terraform_cloud_api_token:
        description: Terraform Cloud API token
        required: true

jobs:
  tf-code-validation:
    name: Terraform code validation
    runs-on: [self-hosted]

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.target-directory }}

    steps:
      # Checkout repository
      - name: Checkout
        id: checkout
        uses: actions/checkout@v3

      # Retrieves the terraform CLI used in the GitHub action workflow
      - name: Setup Terraform
        id: tf-setup
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.terraform_cloud_api_token }}
          terraform_wrapper: false

      # Checks whether the repository has been properly formatted.
      # If it isn't properly formatted this step will produce an error.
      - name: Terraform Format
        id: tf-fmt
        run: terraform fmt -check

      # Initializes Terraform configurations.
      - name: Terraform Init
        id: tf-init
        run: terraform init

      # Validates Terraform configurations.
      - name: Terraform Validate
        id: tf-validate
        run: terraform validate -no-color

      # Generates a Terraform plan.
      - name: Terraform Plan
        id: tf-plan
        run: terraform plan -input=false -no-color | tee tf-plan-output

      # Store tf plan output to file
      - name: Terraform Plan Output
        id: extract
        run: |
          tfplanoutput=$(grep -oE "Plan: [0-9]+ to add, [0-9]+ to change, [0-9]+ to destroy" tf-plan-output)
          echo "tf-plan-output=$tfplanoutput" >> "$GITHUB_OUTPUT"
